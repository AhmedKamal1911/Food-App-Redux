// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String    @unique
  password      String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole  @default(user)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Product {
  id          String           @id @default(uuid())
  slug        String           @unique
  name        String
  description String
  image       String
  price       Float
  sizes       Size[]
  extras      Extra[]
  orders      ProductOrder[]
  category    ProductCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  String?
  updatedAt   DateTime         @updatedAt
  createdAt   DateTime         @default(now())
}

model ProductCategory {
  id       String    @id @default(uuid())
  slug     String    @unique
  name     String    @unique
  image    String
  products Product[]
}

model Size {
  id        String   @id @default(uuid())
  name      SizeEnum
  price     Float
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([name, productId]) // Ensures a product has only one price per size
}

model Extra {
  id        String   @id @default(uuid())
  name      String
  price     Float
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([name, productId]) // Ensures a product has only one price per extra
}

model Order {
  id        String         @id @default(uuid())
  total     Float
  items     ProductOrder[] // Orders now reference ProductOrder, not Product
  updatedAt DateTime       @updatedAt
  createdAt DateTime       @default(now())
}

model ProductOrder {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  unitPrice Float // Adding this to capture the price at order time
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([orderId, productId]) // Ensures a product appears only once per order
}

enum SizeEnum {
  XSmall
  Small
  Medium
  Large
  XLarge
}

enum UserRole {
  superAdmin
  admin
  user
}
